一、引用和指针的区别
 1、引用必须初始化，指针则不必
 2、引用初始化以后不能改变，指针可以改变所指的对象
 3、不存在指向空值的引用，但是存在指向空值的指针

 

二、C语言程序的内存结构：
 一般认为C中分这几个存储区
 1、栈--由编译器自动分配和释放
 2、堆--一般由程序员分配和释放，如果程序员没有释放，程序结束时可能由OS回收
 3、全局区（静态区）--全局变量和静态变量的存储是放在一起的，初始化的全局变量和静态变量在一块区域；
未初始化的全局变量和未初始化的静态变量在相邻的另外一个区域
 4、另外还有一个专门存放常量的地方，程序结束后释放
 5,   在函数体中定义的变量通常都是放在栈上，用malloc,alloc等分配内存的函数分配得到的就是在堆上。
函数体外定义的变量都是全局变量，加了static后，不管在哪里定义的变量都会存储到全局区（静态区），
在所有函数体外定义的static变量表示在该文件中有效，不能extern到别的文件中去，在函数体内定义的static表示只在该函数体内有效。

 

三、栈和堆
1、栈的空间大小有限定，VC的缺省是2M，栈是编译器自动管理的，不用你操心。
2、堆是动态分配内存的，并且你可以分配使用很大的内存，但是用不好会产生内存泄露，并且频繁的malloc和free会产生内存碎片，
因为C分配动态内存时是寻址匹配的内存的，而栈则不会产生碎片，这里主要涉及到内存对齐的问题，不做细致的讲解。
3、在栈上存取数据比通过指针在堆上存取数据快些。
4、C语言中的malloc和C++里的new都是在堆上进行的。
5、栈是由高地址向低地址扩展的，堆是由地地址向高地址扩展的。

 

四、申请后系统的响应
1、栈：只要栈的剩余空间大于所申请的空间，系统将为程序提供内存。
2、堆：操作系统是通过空闲内存链表来管理堆的，当系统收到程序的申请时，会遍历该链表，寻址第一个空间大于所申请空间的堆节点，
然后将该节点从空闲节点中删除，并将该结点的空间分配给程序。

3、在WINDOWS中，最好的方式是用virtualalloc分配内存，这个分配不是在堆中也不是在栈中，而是直接在进程的地址空间中保留一块内存，
虽然用起来最不方便，但是速度快，也最灵活。

 

五、堆和栈中的存储内容
1、 在函数调用时，第一个进栈的是主函数中，函数调用语句的下一条可执行语句的地址，然后是函数的各个参数，在C中，参数是由右往左入栈的，
然后是函数中的局部变量。注意静态变量是不入栈的。
2、 在堆中，堆得头部用一个字节来存放堆的大小，堆得具体内容由程序员自己来安排。

 

六、static变量和函数
 static变量只初始化一次，存储在全局数据区，只在本文件中可见，static定义的函数也是只有本文件中可见，其他文见中均不可见，
可以在不同的文件中定义相同的函数名，只要在前面加static修饰符。

 

七、全局变量存储在静态数据区，局部变量存储在堆栈。

八、const常量声明时必须初始化，引用在声明时也必须初始化

九、char c[] = "hello"是分配一个局部数组
       char *s = "hello"是分配一个全局数组 (有点疑问？？？)
   局部数组是局部变量，放在内存的栈中，全局数组是全局变量，放在全局数据区，全局区域的值是不能修改的，局部区的数据可以修改。如s = 't'是错误的，而c[0]='t'是正确的
